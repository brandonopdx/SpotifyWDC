'use strict';

var _nibbler = require('./nibbler');

var _nibbler2 = _interopRequireDefault(_nibbler);

var _formatters = require('./config/formatters');

var fmt = _interopRequireWildcard(_formatters);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _eslintFilteredFix = require('eslint-filtered-fix');

var _trimStat = require('./trim-stat');

var _trimStat2 = _interopRequireDefault(_trimStat);

var _options = require('./config/options');

var _options2 = _interopRequireDefault(_options);

var _package = require('../package.json');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var cli = {

  execute: function execute(args) {
    var currentOptions = void 0,
        files = void 0,
        extensions = void 0,
        config = void 0;

    // Parse options
    try {
      currentOptions = _options2.default.parse(args);
      files = currentOptions._;
      extensions = currentOptions.ext;
      config = currentOptions.config;
    } catch (error) {
      console.error(error.message);
      return 1;
    }

    // Decide what to do based on options
    if (currentOptions.version) {
      // Show version from package.json
      console.log('v' + _package.version);
    } else if (currentOptions.help || !files.length) {
      // Show help
      console.log(_options2.default.generateHelp());
    } else {
      var configuration = { extensions: extensions };
      if (config) {
        configuration.configFile = config;
      }

      _nibbler2.default.configure(configuration);
      var report = _nibbler2.default.nibbleOnFiles(files);
      if (report && (report.errorCount > 0 || report.warningCount > 0)) {
        // Check if there was a fatal error
        var fatalReport = _nibbler2.default.getFatalResults(report);
        if (fatalReport) {
          var errors = _nibbler2.default.getFormattedResults(fatalReport, 'stylish');
          console.log(errors);
          console.error('Fatal error(s) were detected.  Please correct and try again.');
          return 1;
        }

        // Show summary
        var summary = _nibbler2.default.getFormattedResults(report, fmt.summary);
        console.log(summary);

        // Calculate stats array
        var stats = _nibbler2.default.getFormattedResults(report, fmt.stats).split('\n');

        // Determine the length of the longest stat
        var maxStatLen = stats.reduce(function (maxLen, stat) {
          return Math.max(maxLen, stat.length);
        }, 0);
        // Inquirer adds three characters, so we will need to trim them later
        var maxAllowedLen = maxStatLen - 3;

        // Create an array of choices from the stats
        // (filter removes empty stat at end)
        var results = stats.filter(function (stat) {
          return stat;
        }).map(function (stat) {
          var ruleName = stat.split(':')[0];
          // If the stat length is within 3 of max, we need to truncate it
          // so that the line does not wrap once inquirer adds a select arrow
          // (This throws off the relative length slightly, but not much)
          var fullStat = stat.length <= maxAllowedLen
          // Short enough to return as-is
          ? stat
          // Need to remove spaces, while accounting for 10 char ansi escape for color
          : (0, _trimStat2.default)(stat, maxAllowedLen);

          return {
            name: fullStat,
            value: ruleName,
            short: ruleName
          };
        });

        // Ask user for the rule to narrow in on
        _inquirer2.default.prompt([{
          name: 'rule',
          type: 'list',
          message: 'Which rule would you like to fix?',
          choices: results,
          pageSize: results.length
        }, {
          name: 'fix',
          type: 'confirm',
          message: 'Would you like to attempt to auto-fix?',
          default: false,
          when: function when(answers) {
            var ruleReport = _nibbler2.default.getRuleResults(report, answers.rule);
            return ruleReport.fixableErrorCount > 0 || ruleReport.fixableWarningCount > 0;
          }
        }, {
          name: 'fixWarnings',
          type: 'confirm',
          message: 'Autofix warnings?',
          default: true,
          when: function when(answers) {
            if (!answers.fix) return false;

            var ruleReport = _nibbler2.default.getRuleResults(report, answers.rule);
            return ruleReport.fixableWarningCount > 0;
          }
        }]).then(function gotInput(answers) {
          // Display detailed error reports
          var ruleName = answers.rule;

          if (answers.fix) {
            var fixOptions = {
              rules: [ruleName],
              warnings: answers.fixWarnings
            };
            var fixedReport = (0, _eslintFilteredFix.fix)(files, fixOptions, configuration);
            var ruleResults = _nibbler2.default.getRuleResults(fixedReport, ruleName);
            if (ruleResults.errorCount > 0 || ruleResults.warningCount > 0) {
              var detailed = _nibbler2.default.getFormattedResults(ruleResults, fmt.detailed);
              console.log(detailed);
            } else {
              console.log(_chalk2.default.green('Fixes applied, ' + ruleName + ' is now passing'));
            }
          } else {
            var _ruleResults = _nibbler2.default.getRuleResults(report, ruleName);
            var _detailed = _nibbler2.default.getFormattedResults(_ruleResults, fmt.detailed);
            console.log(_detailed);
          }
        });

        // No report or not any errors or warnings
      } else {
        console.log(_chalk2.default.green('Great job, all lint rules passed.'));
        return 0;
      }
    }
    return 0;
  }
};

module.exports = cli;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
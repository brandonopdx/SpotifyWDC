'use strict';

var _eslint = require('eslint');

var cli = new _eslint.CLIEngine({});

function getCounts(messages) {
  var counts = messages.reduce(function (result, message) {
    if (message.severity === 1) {
      result.warningCount++;
      if (message.fix) {
        result.fixableWarningCount++;
      }
    }
    if (message.severity === 2) {
      result.errorCount++;
      if (message.fix) {
        result.fixableErrorCount++;
      }
    }
    return result;
  }, { errorCount: 0, warningCount: 0, fixableErrorCount: 0, fixableWarningCount: 0 });

  return counts;
}

/**
 * Get only the results wanted from a report
 * @param  {object} report   The report to filter
 * @param  {string} msgKey   Name of the message property on which to filter
 * @param  {object} options  Options to use for comparison
 * @return {object}          Report object which only contains messages that pass filter
 */
function filterResults(report, msgKey, options) {
  var newResults = {};
  var totalErrors = 0;
  var totalWarnings = 0;
  var totalFixableErrors = 0;
  var totalFixableWarnings = 0;
  newResults.results = report.results.map(function (result) {
    var filteredMessages = result.messages.filter(function (msg) {
      if (options.present) {
        return msg[msgKey];
      }
      if (options.compareVal) {
        return msg[msgKey] === options.compareVal;
      }
      return false;
    });
    if (filteredMessages) {
      var _getCounts = getCounts(filteredMessages),
          errorCount = _getCounts.errorCount,
          warningCount = _getCounts.warningCount,
          fixableErrorCount = _getCounts.fixableErrorCount,
          fixableWarningCount = _getCounts.fixableWarningCount;

      totalErrors += errorCount;
      totalWarnings += warningCount;
      totalFixableErrors += fixableErrorCount;
      totalFixableWarnings += fixableWarningCount;
      // fixableErrors += fixableErrors;
      return {
        filePath: result.filePath,
        messages: filteredMessages,

        errorCount: errorCount,
        warningCount: warningCount,
        fixableErrorCount: fixableErrorCount,
        fixableWarningCount: fixableWarningCount
      };
    }
    return {};
  });
  newResults.errorCount = totalErrors;
  newResults.warningCount = totalWarnings;
  newResults.fixableErrorCount = totalFixableErrors;
  newResults.fixableWarningCount = totalFixableWarnings;
  return newResults;
}

module.exports = {
  configure: function configure(configuration) {
    cli = new _eslint.CLIEngine(configuration);
  },
  nibbleOnFiles: function nibbleOnFiles(files) {
    var report = cli.executeOnFiles(files);
    return report;
  },
  getFatalResults: function getFatalResults(report) {
    var fatalResults = filterResults(report, 'fatal', { present: true });
    if (fatalResults.errorCount > 0) {
      return fatalResults;
    }
    return undefined;
  },
  getFormattedResults: function getFormattedResults(report, fmt) {
    var formatter = cli.getFormatter(fmt);
    return formatter(report.results);
  },
  getRuleResults: function getRuleResults(report, ruleName) {
    var ruleResults = filterResults(report, 'ruleId', { compareVal: ruleName });
    return ruleResults;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9uaWJibGVyLmpzIl0sIm5hbWVzIjpbImNsaSIsImdldENvdW50cyIsIm1lc3NhZ2VzIiwiY291bnRzIiwicmVkdWNlIiwicmVzdWx0IiwibWVzc2FnZSIsInNldmVyaXR5Iiwid2FybmluZ0NvdW50IiwiZml4IiwiZml4YWJsZVdhcm5pbmdDb3VudCIsImVycm9yQ291bnQiLCJmaXhhYmxlRXJyb3JDb3VudCIsImZpbHRlclJlc3VsdHMiLCJyZXBvcnQiLCJtc2dLZXkiLCJvcHRpb25zIiwibmV3UmVzdWx0cyIsInRvdGFsRXJyb3JzIiwidG90YWxXYXJuaW5ncyIsInRvdGFsRml4YWJsZUVycm9ycyIsInRvdGFsRml4YWJsZVdhcm5pbmdzIiwicmVzdWx0cyIsIm1hcCIsImZpbHRlcmVkTWVzc2FnZXMiLCJmaWx0ZXIiLCJtc2ciLCJwcmVzZW50IiwiY29tcGFyZVZhbCIsImZpbGVQYXRoIiwibW9kdWxlIiwiZXhwb3J0cyIsImNvbmZpZ3VyZSIsImNvbmZpZ3VyYXRpb24iLCJuaWJibGVPbkZpbGVzIiwiZmlsZXMiLCJleGVjdXRlT25GaWxlcyIsImdldEZhdGFsUmVzdWx0cyIsImZhdGFsUmVzdWx0cyIsInVuZGVmaW5lZCIsImdldEZvcm1hdHRlZFJlc3VsdHMiLCJmbXQiLCJmb3JtYXR0ZXIiLCJnZXRGb3JtYXR0ZXIiLCJnZXRSdWxlUmVzdWx0cyIsInJ1bGVOYW1lIiwicnVsZVJlc3VsdHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUNBLElBQUlBLE1BQU0sc0JBQWMsRUFBZCxDQUFWOztBQUVBLFNBQVNDLFNBQVQsQ0FBbUJDLFFBQW5CLEVBQTZCO0FBQzNCLE1BQUlDLFNBQVNELFNBQVNFLE1BQVQsQ0FBZ0IsVUFBVUMsTUFBVixFQUFrQkMsT0FBbEIsRUFBMkI7QUFDdEQsUUFBSUEsUUFBUUMsUUFBUixLQUFxQixDQUF6QixFQUE0QjtBQUMxQkYsYUFBT0csWUFBUDtBQUNBLFVBQUlGLFFBQVFHLEdBQVosRUFBaUI7QUFD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LFlBQUosQ0FBaUJGLEdBQWpCLENBQWhCO0FBQ0EsV0FBT0MsVUFBVTVCLE9BQU9RLE9BQWpCLENBQVA7QUFDRCxHQXRCYztBQXdCZnNCLGdCQXhCZSwwQkF3QkE5QixNQXhCQSxFQXdCUStCLFFBeEJSLEVBd0JrQjtBQUMvQixRQUFJQyxjQUFjakMsY0FBY0MsTUFBZCxFQUFzQixRQUF0QixFQUFnQyxFQUFFYyxZQUFZaUIsUUFBZCxFQUFoQyxDQUFsQjtBQUNBLFdBQU9DLFdBQVA7QUFDRDtBQTNCYyxDQUFqQiIsImZpbGUiOiJuaWJibGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgeyBDTElFbmdpbmUgfSBmcm9tICdlc2xpbnQnO1xubGV0IGNsaSA9IG5ldyBDTElFbmdpbmUoe30pO1xuXG5mdW5jdGlvbiBnZXRDb3VudHMobWVzc2FnZXMpIHtcbiAgbGV0IGNvdW50cyA9IG1lc3NhZ2VzLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2Uuc2V2ZXJpdHkgPT09IDEpIHtcbiAgICAgIHJlc3VsdC53YXJuaW5nQ291bnQrKztcbiAgICAgIGlmIChtZXNzYWdlLmZpeCkge1xuICAgICAgICByZXN1bHQuZml4YWJsZVdhcm5pbmdDb3VudCsrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAobWVzc2FnZS5zZXZlcml0eSA9PT0gMikge1xuICAgICAgcmVzdWx0LmVycm9yQ291bnQrKztcbiAgICAgIGlmIChtZXNzYWdlLmZpeCkge1xuICAgICAgICByZXN1bHQuZml4YWJsZUVycm9yQ291bnQrKztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSwgeyBlcnJvckNvdW50OiAwLCB3YXJuaW5nQ291bnQ6IDAsIGZpeGFibGVFcnJvckNvdW50OiAwLCBmaXhhYmxlV2FybmluZ0NvdW50OiAwIH0pO1xuXG4gIHJldHVybiBjb3VudHM7XG59XG5cbi8qKlxuICogR2V0IG9ubHkgdGhlIHJlc3VsdHMgd2FudGVkIGZyb20gYSByZXBvcnRcbiAqIEBwYXJhbSAge29iamVjdH0gcmVwb3J0ICAgVGhlIHJlcG9ydCB0byBmaWx0ZXJcbiAqIEBwYXJhbSAge3N0cmluZ30gbXNnS2V5ICAgTmFtZSBvZiB0aGUgbWVzc2FnZSBwcm9wZXJ0eSBvbiB3aGljaCB0byBmaWx0ZXJcbiAqIEBwYXJhbSAge29iamVjdH0gb3B0aW9ucyAgT3B0aW9ucyB0byB1c2UgZm9yIGNvbXBhcmlzb25cbiAqIEByZXR1cm4ge29iamVjdH0gICAgICAgICAgUmVwb3J0IG9iamVjdCB3aGljaCBvbmx5IGNvbnRhaW5zIG1lc3NhZ2VzIHRoYXQgcGFzcyBmaWx0ZXJcbiAqL1xuZnVuY3Rpb24gZmlsdGVyUmVzdWx0cyhyZXBvcnQsIG1zZ0tleSwgb3B0aW9ucykge1xuICBsZXQgbmV3UmVzdWx0cyA9IHt9O1xuICBsZXQgdG90YWxFcnJvcnMgPSAwO1xuICBsZXQgdG90YWxXYXJuaW5ncyA9IDA7XG4gIGxldCB0b3RhbEZpeGFibGVFcnJvcnMgPSAwO1xuICBsZXQgdG90YWxGaXhhYmxlV2FybmluZ3MgPSAwO1xuICBuZXdSZXN1bHRzLnJlc3VsdHMgPSByZXBvcnQucmVzdWx0cy5tYXAoZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgIGxldCBmaWx0ZXJlZE1lc3NhZ2VzID0gcmVzdWx0Lm1lc3NhZ2VzLmZpbHRlcihmdW5jdGlvbiAobXNnKSB7XG4gICAgICBpZiAob3B0aW9ucy5wcmVzZW50KSB7XG4gICAgICAgIHJldHVybiAobXNnW21zZ0tleV0pO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMuY29tcGFyZVZhbCkge1xuICAgICAgICByZXR1cm4gKG1zZ1ttc2dLZXldID09PSBvcHRpb25zLmNvbXBhcmVWYWwpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuICAgIGlmIChmaWx0ZXJlZE1lc3NhZ2VzKSB7XG4gICAgICBsZXQgeyBlcnJvckNvdW50LCB3YXJuaW5nQ291bnQsIGZpeGFibGVFcnJvckNvdW50LCBmaXhhYmxlV2FybmluZ0NvdW50IH0gPSBnZXRDb3VudHMoZmlsdGVyZWRNZXNzYWdlcyk7XG4gICAgICB0b3RhbEVycm9ycyArPSBlcnJvckNvdW50O1xuICAgICAgdG90YWxXYXJuaW5ncyArPSB3YXJuaW5nQ291bnQ7XG4gICAgICB0b3RhbEZpeGFibGVFcnJvcnMgKz0gZml4YWJsZUVycm9yQ291bnQ7XG4gICAgICB0b3RhbEZpeGFibGVXYXJuaW5ncyArPSBmaXhhYmxlV2FybmluZ0NvdW50O1xuICAgICAgLy8gZml4YWJsZUVycm9ycyArPSBmaXhhYmxlRXJyb3JzO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZmlsZVBhdGg6IHJlc3VsdC5maWxlUGF0aCxcbiAgICAgICAgbWVzc2FnZXM6IGZpbHRlcmVkTWVzc2FnZXMsXG5cbiAgICAgICAgZXJyb3JDb3VudCxcbiAgICAgICAgd2FybmluZ0NvdW50LFxuICAgICAgICBmaXhhYmxlRXJyb3JDb3VudCxcbiAgICAgICAgZml4YWJsZVdhcm5pbmdDb3VudFxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHt9O1xuICB9KTtcbiAgbmV3UmVzdWx0cy5lcnJvckNvdW50ID0gdG90YWxFcnJvcnM7XG4gIG5ld1Jlc3VsdHMud2FybmluZ0NvdW50ID0gdG90YWxXYXJuaW5ncztcbiAgbmV3UmVzdWx0cy5maXhhYmxlRXJyb3JDb3VudCA9IHRvdGFsRml4YWJsZUVycm9ycztcbiAgbmV3UmVzdWx0cy5maXhhYmxlV2FybmluZ0NvdW50ID0gdG90YWxGaXhhYmxlV2FybmluZ3M7XG4gIHJldHVybiBuZXdSZXN1bHRzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblxuICBjb25maWd1cmUoY29uZmlndXJhdGlvbikge1xuICAgIGNsaSA9IG5ldyBDTElFbmdpbmUoY29uZmlndXJhdGlvbik7XG4gIH0sXG5cbiAgbmliYmxlT25GaWxlcyhmaWxlcykge1xuICAgIGxldCByZXBvcnQgPSBjbGkuZXhlY3V0ZU9uRmlsZXMoZmlsZXMpO1xuICAgIHJldHVybiByZXBvcnQ7XG4gIH0sXG5cbiAgZ2V0RmF0YWxSZXN1bHRzKHJlcG9ydCkge1xuICAgIGxldCBmYXRhbFJlc3VsdHMgPSBmaWx0ZXJSZXN1bHRzKHJlcG9ydCwgJ2ZhdGFsJywgeyBwcmVzZW50OiB0cnVlIH0pO1xuICAgIGlmIChmYXRhbFJlc3VsdHMuZXJyb3JDb3VudCA+IDApIHtcbiAgICAgIHJldHVybiBmYXRhbFJlc3VsdHM7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0sXG5cbiAgZ2V0Rm9ybWF0dGVkUmVzdWx0cyhyZXBvcnQsIGZtdCkge1xuICAgIGxldCBmb3JtYXR0ZXIgPSBjbGkuZ2V0Rm9ybWF0dGVyKGZtdCk7XG4gICAgcmV0dXJuIGZvcm1hdHRlcihyZXBvcnQucmVzdWx0cyk7XG4gIH0sXG5cbiAgZ2V0UnVsZVJlc3VsdHMocmVwb3J0LCBydWxlTmFtZSkge1xuICAgIGxldCBydWxlUmVzdWx0cyA9IGZpbHRlclJlc3VsdHMocmVwb3J0LCAncnVsZUlkJywgeyBjb21wYXJlVmFsOiBydWxlTmFtZSB9KTtcbiAgICByZXR1cm4gcnVsZVJlc3VsdHM7XG4gIH1cbn07XG4iXX0=